import{_ as l,C as n,c as p,o,j as a,a as e,ai as r,G as t}from"./chunks/framework.B2w7hVFN.js";const T=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api.md","filePath":"reference/api.md","lastUpdated":null}'),d={name:"reference/api.md"},h={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""};function E(D,s,v,j,C,A){const i=n("Badge");return o(),p("div",null,[s[36]||(s[36]=a("h1",{id:"api",tabindex:"-1"},[e("API "),a("a",{class:"header-anchor",href:"#api","aria-label":'Permalink to "API"'},"â€‹")],-1)),a("details",h,[a("summary",null,[s[0]||(s[0]=a("a",{id:"GeoDataFrames.read",href:"#GeoDataFrames.read"},[a("span",{class:"jlbinding"},"GeoDataFrames.read")],-1)),s[1]||(s[1]=e()),t(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[2]||(s[2]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; layer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Integer,AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Read a file into a DataFrame. Any kwargs are passed to the driver, by default set to <a href="/GeoDataFrames.jl/dev/reference/api#GeoDataFrames.ArchGDALDriver"><code>ArchGDALDriver</code></a>.</p><p><a href="https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/io.jl#L45-L49" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(driver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Read a file into a DataFrame using the specified driver. Any kwargs are passed to the driver, by default set to <a href="/GeoDataFrames.jl/dev/reference/api#GeoDataFrames.ArchGDALDriver"><code>ArchGDALDriver</code></a>.</p><p><a href="https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/io.jl#L66-L70" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(driver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ArchGDALDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; layer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Integer,AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Read a file into a DataFrame using the ArchGDAL driver. By default you only get the first layer, unless you specify either the index (0 based) or name (string) of the layer. Other supported kwargs are passed to the <a href="https://yeesian.com/ArchGDAL.jl/stable/reference/#ArchGDAL.read-Tuple%7BAbstractString%7D" target="_blank" rel="noreferrer">ArchGDAL read</a> method.</p><p><a href="https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/io.jl#L76-L82" target="_blank" rel="noreferrer">source</a></p>',9))]),a("details",k,[a("summary",null,[s[3]||(s[3]=a("a",{id:"GeoDataFrames.write",href:"#GeoDataFrames.write"},[a("span",{class:"jlbinding"},"GeoDataFrames.write")],-1)),s[4]||(s[4]=e()),t(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[5]||(s[5]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, table; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Write the provided <code>table</code> to <code>fn</code>. A driver is selected based on the extension of <code>fn</code>.</p><p><a href="https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/io.jl#L126-L130" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(driver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, table; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Write the provided <code>table</code> to <code>fn</code> using the specified driver. Any kwargs are passed to the driver, by default set to <a href="/GeoDataFrames.jl/dev/reference/api#GeoDataFrames.ArchGDALDriver"><code>ArchGDALDriver</code></a>.</p><p><a href="https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/io.jl#L136-L140" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(driver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ArchGDALDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, table; layer_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, crs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GFT.GeoFormat,Nothing}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getcrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table), driver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing,AbstractString}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict{String,String}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), geom_columns</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Symbol}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getgeometrycolumns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table), kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Write the provided <code>table</code> to <code>fn</code> using the ArchGDAL driver.</p><p><a href="https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/io.jl#L146-L150" target="_blank" rel="noreferrer">source</a></p>',9))]),a("details",g,[a("summary",null,[s[6]||(s[6]=a("a",{id:"GeoDataFrames.reproject",href:"#GeoDataFrames.reproject"},[a("span",{class:"jlbinding"},"GeoDataFrames.reproject")],-1)),s[7]||(s[7]=e()),t(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[8]||(s[8]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reproject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, to_crs; [always_xy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Reproject the geometries in a DataFrame <code>df</code> to a new Coordinate Reference System <code>to_crs</code>, from the current CRS. See also <a href="/GeoDataFrames.jl/dev/reference/api#GeoDataFrames.reproject"><code>reproject(df, from_crs, to_crs)</code></a> and the in place version <a href="/GeoDataFrames.jl/dev/reference/api#GeoDataFrames.reproject!"><code>reproject!(df, to_crs)</code></a>. <code>always_xy</code> (<code>false</code> by default) can override the default axis mapping strategy of the CRS. If true, input is assumed to be in the traditional GIS order (longitude, latitude).</p><p><a href="https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/utils.jl#L104-L111" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reproject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_crs, to_crs; [always_xy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Reproject the geometries in a DataFrame <code>df</code> from the crs <code>from_crs</code> to a new crs <code>to_crs</code>. This overrides any current CRS of the Dataframe.</p><p><a href="https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/utils.jl#L116-L121" target="_blank" rel="noreferrer">source</a></p>',6))]),a("details",c,[a("summary",null,[s[9]||(s[9]=a("a",{id:"GeoDataFrames.reproject!",href:"#GeoDataFrames.reproject!"},[a("span",{class:"jlbinding"},"GeoDataFrames.reproject!")],-1)),s[10]||(s[10]=e()),t(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[11]||(s[11]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reproject!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, to_crs; [always_xy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Reproject the geometries in a DataFrame <code>df</code> to a new Coordinate Reference System <code>to_crs</code>, from the current CRS, in place.</p><p><a href="https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/utils.jl#L126-L130" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reproject!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_crs, to_crs; [always_xy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Reproject the geometries in a DataFrame <code>df</code> from the crs <code>from_crs</code> to a new crs <code>to_crs</code> in place. This overrides any current CRS of the Dataframe.</p><p><a href="https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/utils.jl#L135-L140" target="_blank" rel="noreferrer">source</a></p>',6))]),s[37]||(s[37]=a("h2",{id:"drivers",tabindex:"-1"},[e("Drivers "),a("a",{class:"header-anchor",href:"#drivers","aria-label":'Permalink to "Drivers"'},"â€‹")],-1)),s[38]||(s[38]=a("p",null,"The following drivers are provided:",-1)),a("details",b,[a("summary",null,[s[12]||(s[12]=a("a",{id:"GeoDataFrames.GeoJSONDriver",href:"#GeoDataFrames.GeoJSONDriver"},[a("span",{class:"jlbinding"},"GeoDataFrames.GeoJSONDriver")],-1)),s[13]||(s[13]=e()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[14]||(s[14]=a("p",null,"GeoJSON driver",-1)),s[15]||(s[15]=a("p",null,[a("a",{href:"https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/drivers.jl#L3-L5",target:"_blank",rel:"noreferrer"},"source")],-1))]),a("details",y,[a("summary",null,[s[16]||(s[16]=a("a",{id:"GeoDataFrames.ShapefileDriver",href:"#GeoDataFrames.ShapefileDriver"},[a("span",{class:"jlbinding"},"GeoDataFrames.ShapefileDriver")],-1)),s[17]||(s[17]=e()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[18]||(s[18]=a("p",null,"Shapefile driver",-1)),s[19]||(s[19]=a("p",null,[a("a",{href:"https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/drivers.jl#L7-L9",target:"_blank",rel:"noreferrer"},"source")],-1))]),a("details",u,[a("summary",null,[s[20]||(s[20]=a("a",{id:"GeoDataFrames.GeoParquetDriver",href:"#GeoDataFrames.GeoParquetDriver"},[a("span",{class:"jlbinding"},"GeoDataFrames.GeoParquetDriver")],-1)),s[21]||(s[21]=e()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[22]||(s[22]=a("p",null,"GeoParquet driver",-1)),s[23]||(s[23]=a("p",null,[a("a",{href:"https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/drivers.jl#L11-L13",target:"_blank",rel:"noreferrer"},"source")],-1))]),a("details",F,[a("summary",null,[s[24]||(s[24]=a("a",{id:"GeoDataFrames.FlatGeobufDriver",href:"#GeoDataFrames.FlatGeobufDriver"},[a("span",{class:"jlbinding"},"GeoDataFrames.FlatGeobufDriver")],-1)),s[25]||(s[25]=e()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[26]||(s[26]=a("p",null,"FlatGeobuf driver",-1)),s[27]||(s[27]=a("p",null,[a("a",{href:"https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/drivers.jl#L15-L17",target:"_blank",rel:"noreferrer"},"source")],-1))]),a("details",f,[a("summary",null,[s[28]||(s[28]=a("a",{id:"GeoDataFrames.ArchGDALDriver",href:"#GeoDataFrames.ArchGDALDriver"},[a("span",{class:"jlbinding"},"GeoDataFrames.ArchGDALDriver")],-1)),s[29]||(s[29]=e()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[30]||(s[30]=a("p",null,"ArchGDAL driver (default)",-1)),s[31]||(s[31]=a("p",null,[a("a",{href:"https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/drivers.jl#L19-L21",target:"_blank",rel:"noreferrer"},"source")],-1))]),a("details",m,[a("summary",null,[s[32]||(s[32]=a("a",{id:"GeoDataFrames.GeoArrowDriver",href:"#GeoDataFrames.GeoArrowDriver"},[a("span",{class:"jlbinding"},"GeoDataFrames.GeoArrowDriver")],-1)),s[33]||(s[33]=e()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[34]||(s[34]=a("p",null,"GeoArrow driver",-1)),s[35]||(s[35]=a("p",null,[a("a",{href:"https://github.com/evetion/GeoDataFrames.jl/blob/a8e19988fda46a05f1baaa47dd9c8966ea63bd53/src/drivers.jl#L23-L25",target:"_blank",rel:"noreferrer"},"source")],-1))]),s[39]||(s[39]=a("p",null,[e("These can be passed to the "),a("a",{href:"/GeoDataFrames.jl/dev/reference/api#GeoDataFrames.read"},[a("code",null,"read")]),e(" and "),a("a",{href:"/GeoDataFrames.jl/dev/reference/api#GeoDataFrames.write"},[a("code",null,"write")]),e(" functions as the first argument, but require the corresponding package to be loaded. You can find the corresponding package to load in the "),a("a",{href:"/GeoDataFrames.jl/dev/reference/api#package-extensions"},"package extensions"),e(" section.")],-1))])}const L=l(d,[["render",E]]);export{T as __pageData,L as default};
